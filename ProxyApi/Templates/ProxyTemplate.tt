<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

(function($) {
	"use strict";

	if (!$) {
		throw "jQuery is required";
	}

	$.proxies = $.proxies || {};

	function getQueryString(params) {
		var queryString = "";
		for(var prop in params) {
			if (params.hasOwnProperty(prop)) {
				var val = getArgValue(params[prop]);
				if (val === null) continue;

				if (queryString.length) {
					queryString += "&";
				} else {
					queryString += "?";
				}
				queryString = queryString + prop + "=" +val;
			}
		}
		return queryString;
	}

	function getArgValue(val) {
		if (val === undefined || val === null) return null;
		return val;
	}

	function invoke(url, type, urlParams, body) {
		url += getQueryString(urlParams);

		var ajaxOptions = {
			url: url,
			type: type
		};

		if (body) {
			ajaxOptions.data = body;
		}
	
		return $.ajax(ajaxOptions);
	};

	/* Proxies */
<# foreach(var definition in this.Definitions) { #>
	$.proxies.<#= definition.Name #> = {
<# for (int mN = 0; mN < definition.ActionMethods.Count; mN++) {
    var method = definition.ActionMethods[mN];
	var allParameters = method.UrlParameters.AsEnumerable();
	
	if (method.BodyParameter != null) {
		allParameters = allParameters.Concat(new [] { method.BodyParameter });
	}
	var parameterList = string.Join(",", allParameters.Where(m => m != null).OrderBy(m => m.Index).Select(m => m.Name).ToArray());
#>
		<#= method.Name #>: function(<#=parameterList#>) {
			return invoke("<#= method.Url #>", "<#= method.Type.ToString().ToLower() #>", 
<# if (method.UrlParameters.Any()) { #>
				{
<# for (int pN = 0; pN < method.UrlParameters.Count; pN++) {
					var parameter = method.UrlParameters[pN];	#>
					<#= parameter.Name #>: arguments[<#= parameter.Index #>]<# WriteLine((pN != (method.UrlParameters.Count - 1)) ? "," : ""); #>
<# } #>
				}
<# } else { #>
				{}
<# } #>
<# if (method.BodyParameter != null) { #>
				, arguments[<#= method.BodyParameter.Index #>]);
<# } else { #>
			);
<# } #>
		}<# WriteLine((mN != (definition.ActionMethods.Count - 1)) ? "," : ""); #>
<# } #>
	};
<# } #>
}(jQuery));