<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
// Proxies

<# foreach(var definition in this.Definitions) { #>
namespace ProxyApi.Proxies.<#=definition.Name#><#=definition.Type#>
{

	#region Models
<# foreach(var model in definition.Models) { #>
	public class <#=model.Name#>
	{
<# foreach(var propertyItem in model.Data) { #>
		public <#= propertyItem.Value #> <#= propertyItem.Key #> { get; set; }
<#}#>
	}
<#}#>
	#endregion

	public class <#=definition.Name#>Client : IDisposable
	{
		public HttpClient HttpClient { get; private set; }

		public <#=definition.Name#>Client()
		{
			HttpClient = new HttpClient();
			HttpClient.BaseAddress = new Uri("<#= definition.Host #>");
		}

		#region Methods
<# foreach(var method in definition.ActionMethods) { 
		var allParameters = method.UrlParameters.AsEnumerable();
		
		var queryParameterString = "\"";
		var bodyParameterString = "";

		if (method.BodyParameter != null) {
			allParameters = allParameters.Concat(new [] { method.BodyParameter });
			bodyParameterString = ", " + method.BodyParameter.Name;
		}


		if (allParameters.Any()) {
			queryParameterString = "?";

			queryParameterString += string.Join(" + \"&", allParameters.Where(m => m != null).OrderBy(m => m.Index).Select(m => m.Name + "=\" + " + m.Name).ToArray());
		

		}

		var parameterList = "";

		if (allParameters.Any())
		{
		var q = allParameters.Where(m => m != null).OrderBy(m => m.Index).Select(m => m.Type + " " + m.Name);

		if (q != null)
			parameterList = string.Join(",", q.ToArray());
		}

		var postOrPut =  method.Type.ToString() == "Post" || method.Type.ToString() == "Put";
#>
		public async Task<HttpResponseMessage> <#= method.Name #>(<#= parameterList#>)
		{
			return await HttpClient.<#=method.Type#><#= postOrPut ? "AsJson" : "" #>Async<#= postOrPut && method.BodyParameter != null ? "<" + method.BodyParameter.Type + ">" : "" #>("<#=method.Url#><#=queryParameterString#><#=bodyParameterString#>);
		}

<#}#>
		#endregion

		public void Dispose()
        {
            HttpClient.Dispose();
        }
	}

}
<# } #>
